// <auto-generated />
using System;
using CylindricalPipeHeatLoss.API.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CylindricalPipeHeatLoss.API.Migrations
{
    [DbContext(typeof(HeatLossDbContext))]
    [Migration("20240224214859_ReportDB_PipeLength_Added")]
    partial class ReportDB_PipeLength_Added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("CylindricalPipeHeatLoss.API.Models.DBModels.DiameterDB", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReportGeneratedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ReportID", "ReportGeneratedAt");

                    b.ToTable("Diameters");
                });

            modelBuilder.Entity("CylindricalPipeHeatLoss.API.Models.DBModels.PipeLayerDB", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("VARCHAR(128)");

                    b.Property<DateTime>("ReportGeneratedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ThermalConductivityCoeff")
                        .HasColumnType("REAL");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ReportID", "ReportGeneratedAt");

                    b.ToTable("PipeLayers");
                });

            modelBuilder.Entity("CylindricalPipeHeatLoss.API.Models.DBModels.ReportDB", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("LinearHeatFlowDensity_ql")
                        .HasColumnType("REAL");

                    b.Property<double>("LinearHeatTransferCoefficient_kl")
                        .HasColumnType("REAL");

                    b.Property<double>("PipeLength")
                        .HasColumnType("REAL");

                    b.Property<double>("PipeThermalResistance_Rl")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalHeatLoss_Q")
                        .HasColumnType("REAL");

                    b.HasKey("ID", "GeneratedAt");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("CylindricalPipeHeatLoss.API.Models.DBModels.TemperatureDB", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReportGeneratedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ReportID", "ReportGeneratedAt");

                    b.ToTable("Temperatures");
                });

            modelBuilder.Entity("CylindricalPipeHeatLoss.API.Models.DBModels.ThermalResistanceDB", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReportGeneratedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ReportID", "ReportGeneratedAt");

                    b.ToTable("ThermalResistances");
                });

            modelBuilder.Entity("CylindricalPipeHeatLoss.API.Models.DBModels.DiameterDB", b =>
                {
                    b.HasOne("CylindricalPipeHeatLoss.API.Models.DBModels.ReportDB", "Report")
                        .WithMany("Diameters")
                        .HasForeignKey("ReportID", "ReportGeneratedAt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CylindricalPipeHeatLoss.API.Models.DBModels.PipeLayerDB", b =>
                {
                    b.HasOne("CylindricalPipeHeatLoss.API.Models.DBModels.ReportDB", "Report")
                        .WithMany("PipeLayers")
                        .HasForeignKey("ReportID", "ReportGeneratedAt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CylindricalPipeHeatLoss.API.Models.DBModels.TemperatureDB", b =>
                {
                    b.HasOne("CylindricalPipeHeatLoss.API.Models.DBModels.ReportDB", "Report")
                        .WithMany("Temperatures")
                        .HasForeignKey("ReportID", "ReportGeneratedAt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CylindricalPipeHeatLoss.API.Models.DBModels.ThermalResistanceDB", b =>
                {
                    b.HasOne("CylindricalPipeHeatLoss.API.Models.DBModels.ReportDB", "Report")
                        .WithMany("ThermalResistances")
                        .HasForeignKey("ReportID", "ReportGeneratedAt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CylindricalPipeHeatLoss.API.Models.DBModels.ReportDB", b =>
                {
                    b.Navigation("Diameters");

                    b.Navigation("PipeLayers");

                    b.Navigation("Temperatures");

                    b.Navigation("ThermalResistances");
                });
#pragma warning restore 612, 618
        }
    }
}
